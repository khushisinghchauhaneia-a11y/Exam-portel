{% extends "base.html" %}

{% block head %}
<title>Take Exam - Emerging India Analytics</title>
<style>
    :root {
        --primary-color: #164B60;
        --primary-hover: #1A5F7A;
        --accent-color: #1B6B93;
        --warning-color: #ffc107;
        --danger-color: #dc3545;
        --success-color: #198754;
        --sidebar-width: 280px;
        --header-height: 60px;
    }
    /* [Previous CSS remains unchanged] */
</style>
<script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
{% endblock %}

{% block content %}
<!-- Exam Instructions Modal -->
<div class="exam-instructions" id="examInstructions">
    <div class="instructions-content">
        <h2><i class="fas fa-clipboard-check me-3"></i>Exam Instructions</h2>
        <ul class="instructions-list">
            <li><i class="fas fa-expand-arrows-alt me-2"></i> This exam will run in <strong>fullscreen mode</strong></li>
            <li><i class="fas fa-exclamation-triangle me-2"></i> <strong>Do not</strong> minimize, switch tabs, or exit fullscreen</li>
            <li><i class="fas fa-ban me-2"></i> Right-click, copy, paste, and developer tools are disabled</li>
            <li><i class="fas fa-eye me-2"></i> You have <strong>3 warnings</strong> before automatic submission</li>
            <li><i class="fas fa-wifi me-2"></i> Ensure stable internet connection</li>
            <li><i class="fas fa-clock me-2"></i> Timer will continue running - manage your time wisely</li>
            <li><i class="fas fa-save me-2"></i> Click "Save Progress" regularly to avoid losing answers</li>
        </ul>
        <div class="alert alert-warning mb-4">
            <strong>Warning:</strong> Any attempt to cheat or violate exam rules will result in automatic disqualification.
        </div>
        <button class="btn btn-light btn-lg" onclick="startExam()">
            <i class="fas fa-play me-2"></i> I Understand - Start Exam
        </button>
    </div>
</div>

<!-- [Rest of your HTML remains unchanged] -->

<script type="text/javascript">
// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    // Global exam configuration
    window.examConfig = {
        duration: {{ exam.duration }},
        studentId: {{ current_user.id }},
        maxWarnings: 3
    };

    // Global state variables
    window.examState = {
        isActive: false,
        started: false,
        fullscreenInitialized: false,
        timeRemaining: window.examConfig.duration * 60,
        warningCount: 0,
        fullscreenAttempts: 0,
        maxFullscreenAttempts: 5,
        intervals: {
            timer: null,
            fullscreenCheck: null,
            autoSave: null,
            webcamFrame: null
        }
    };

    // Initialize Socket.IO
    window.socket = io();

    // Initialize webcam state
    window.webcamState = {
        stream: null,
        video: null
    };
});

function startExam() {
    // Check if configuration is loaded
    if (!window.examConfig || !window.examState) {
        console.error('Exam configuration not loaded');
        return;
    }

    // Hide instructions and show exam interface
    document.getElementById('examInstructions').style.display = 'none';
    document.getElementById('mainNavbar').style.display = 'block';
    document.getElementById('timerContainer').style.display = 'flex';
    document.getElementById('examContainer').style.display = 'block';

    // Set exam state
    window.examState.started = true;
    window.examState.isActive = true;

    // Initialize exam components
    initializeExam();
    updateReviewSummary();
    startWebcamStreaming(window.examConfig.studentId);

    // Start auto-save
    window.examState.intervals.autoSave = setInterval(autoSaveAnswers, 60000);
}

function startWebcamStreaming(studentId) {
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(function(stream) {
                window.webcamState.stream = stream;
                window.webcamState.video = document.createElement('video');
                window.webcamState.video.style.display = 'none';
                document.body.appendChild(window.webcamState.video);
                window.webcamState.video.srcObject = stream;
                window.webcamState.video.play();

                // Send frames every 500ms
                window.examState.intervals.webcamFrame = setInterval(function() {
                    sendWebcamFrame(studentId);
                }, 500);
            })
            .catch(function(err) {
                console.error('Webcam access denied:', err);
            });
    }
}

function stopWebcamStreaming() {
    const intervals = window.examState.intervals;
    const webcam = window.webcamState;

    if (intervals.webcamFrame) {
        clearInterval(intervals.webcamFrame);
        intervals.webcamFrame = null;
    }

    if (webcam.stream) {
        webcam.stream.getTracks().forEach(track => track.stop());
        webcam.stream = null;
    }

    if (webcam.video) {
        webcam.video.remove();
        webcam.video = null;
    }
}

function sendWebcamFrame(studentId) {
    if (!window.webcamState.video) return;
    
    const video = window.webcamState.video;
    const canvas = document.createElement('canvas');
    canvas.width = video.videoWidth || 320;
    canvas.height = video.videoHeight || 240;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
    
    const imageData = canvas.toDataURL('image/jpeg');
    window.socket.emit('student_frame', {
        student_id: studentId,
        stream_url: imageData
    });
}

// [Rest of your JavaScript functions remain unchanged, but use window.examState and window.examConfig]
</script>
{% endblock %}